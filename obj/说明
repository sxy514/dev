Constructors.java是 构造函数的 示例
在构造函数示例中了解到 构造函数是用来初始化对象的特殊方法
在创建类的对象时调用构造函数。它可以用来设置对象属性的初始值:
注意，构造函数名必须与类名匹配，并且不能有返回类型(如void)。
默认情况下，所有类都有构造函数:如果您自己不创建类构造函数,Java会为您创建一个,但是这样就不能为对象属性设置初始值了


Modifiers.java 都是修饰符的 示例
在修饰符示例中了解到 修饰符被分为两组，访问修饰符与非访问修饰符
//访问修饰符：控制访问级别
// 对于类，访问修饰符 可使用 public 或 默认不写
public 修饰符表示 该类可以被 任何其他类访问；
默认不写 表示 该类只能被同一个包中的类访问；
// 对于属性，方法和构造函数：.
public : 所有类都可以访问到该代码；
private ：代码只能在声明它的类中访问；
protected ：代码可在相同的包或者子类中访问；
默认不写 ：当你没有指定修饰符的情况下，代码只能被同一个包中访问；
//非访问修饰符：不控制访问级别，提供其他功能
// 对于类 可使用 final 和 abstract :
final 表示 该类不能被继承；
abstract 表示该类为抽象类，无法用于创建对象，只能被继承到子类中后才能访问其属性和方法；
// 对于属性和方法使用：
final:    属性和方法不能被修改/覆盖；
static:   属性和方法属于类，而不是对象，可直接调用
abstract: 只能在抽象类中使用,并且只能应用于方法,创建的抽象方法没有body,例如 abstract void run(); 方法的主体将由子类提供
transient: 在序列化包含 transient 的属性和方法的对象时，将跳过它们
synchronized: 方法一次只能有一个线程访问
volatile: 属性的值不是线程本地缓存的,总是从“main memory”读取


Obj1.java 是 创建类的对象的 示例
在示例中了解到 用 Class 来创建 对象， 使用 new 关键字
创建的对象将拥有类的属性和方法。
例如： 类名 对象名 = new 类名();  // 创建类的对象
然后通过 . 来访问对象属性和方法


InnerClasses.java 是 内嵌类 的示例
在Java中, 也可以嵌套类(类中类)。
嵌套类的目的是将属于一起的类分组，从而使代码更具可读性和可维护性。
要访问内部类，创建一个外部类的对象，然后创建一个内部类的对象:


Abstract.java 是 抽象类 的示例： 
抽象类的概念：抽象类无法创建对象，只能继承到子类中才能调用属性和方法， 
在(abstract)抽象类中创建的抽象方法,主体在子类中提供。例如创建一个abstract方法: public abstract void animalSouud();
为什么以及何时使用抽象类和方法?
为了实现安全性-隐藏某些细节，只显示对象的重要细节。
注意:抽象也可以通过接口来实现，你将在下一章学到更多的知识。

Encapsulation.java 是 封装 的示例：
封装的意义，是确保对用户隐藏“敏感”数据。要做到这一点，你必须:
将类变量/属性声明为私有,提供公共get和set方法来访问和更新私有变量的值
两者的语法都是以get或set开头,后面跟着变量名首字母大写:
在编写 公共set 方法时 需注意该语句的写法 , 在写 公共get 时该方法 return 需要获取的变量


PackageAPI.java 是导入 包/API 的示例
在Java中的包用于将相关的类进行分组,将其视为在一个文件夹
我们使用包来避免名称冲突，并编写更好的可维护代码
包分为两类:
// 内置包(来自Java API的包): 使用 API 用关键字 import
Java API是一个预先编写的类库,可以免费使用,包含在Java开发环境中。
该库包含用于管理输入、数据库编程等的组件。完整的列表可以在oracle网站上找到:https://docs.oracle.com/javase/8/docs/api/。
库分为包和类。这意味着您可以导入单个类(及其方法和属性)，也可以导入包含属于指定包的所有类的整个包。
导入单个类: import package.name.Class;   
导入整个包: import package.name.*;   
// 用户定义的包(创建自己的包): 使用 自定义包 用关键字 package
导入自定义包: package 文件路径；； 例如 package obj;